{"id":"node_modules/lodash/_baseToString.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/lodash/package.json","includedInParent":true,"mtime":1564431754536},{"name":"./_Symbol","loc":{"line":1,"column":21},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseToString.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_Symbol.js"},{"name":"./_arrayMap","loc":{"line":2,"column":23},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseToString.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_arrayMap.js"},{"name":"./isArray","loc":{"line":3,"column":22},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseToString.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/isArray.js"},{"name":"./isSymbol","loc":{"line":4,"column":23},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseToString.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/isSymbol.js"}],"generated":{"js":"var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"},"sourceMaps":null,"error":null,"hash":"13445d36053c25b3645088161152ebb6","cacheData":{"env":{}}}