{"id":"node_modules/semantic-ui-vue/dist/commonjs/elements/Label/Label.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/package.json","includedInParent":true,"mtime":1564431753732},{"name":"babel-helper-vue-jsx-merge-props","loc":{"line":7,"column":43},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Label/Label.js","resolved":"/home/anderson/reservation-app/node_modules/babel-helper-vue-jsx-merge-props/index.js"},{"name":"../../lib","loc":{"line":11,"column":19},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Label/Label.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/index.js"},{"name":"../../lib/PropTypes","loc":{"line":13,"column":25},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Label/Label.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/PropTypes.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');\n\nvar _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);\n\nvar _lib = require('../../lib');\n\nvar _PropTypes = require('../../lib/PropTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = {\n  name: 'SuiLabel',\n  mixins: [_lib.SemanticUIVueMixin],\n  props: {\n    attached: (0, _PropTypes.Enum)(['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right'], {\n      description: 'A label can attach to a content segment.'\n    }),\n    basic: {\n      type: Boolean,\n      description: 'A label can reduce its complexity.'\n    },\n    circular: {\n      type: Boolean,\n      description: 'A label can be circular.'\n    },\n    color: _PropTypes.Enum.Color(),\n    corner: (0, _PropTypes.Enum)(['left', 'right'], {\n      description: 'A label can position itself in the corner of an element.'\n    }),\n    empty: {\n      type: Boolean,\n      description: 'Formats the label as a dot.'\n    },\n    floating: {\n      type: Boolean,\n      description: 'Float above another element in the upper right corner.'\n    },\n    image: Boolean,\n    pointing: (0, _PropTypes.Enum)(['left', 'right', 'above', 'below'], {\n      description: 'A label can point to content next to it.',\n      type: Boolean\n    }),\n    icon: String,\n    ribbon: (0, _PropTypes.Enum)(['left', 'right'], {\n      description: 'A label can appear as a ribbon attaching itself to an element.',\n      type: Boolean\n    }),\n    size: _PropTypes.Enum.Size({\n      description: 'A label can have different sizes.'\n    }),\n    tag: _PropTypes.Enum.Color({\n      description: 'A label can appear as a tag.',\n      type: Boolean\n    })\n  },\n  computed: {\n    pointingClass: function pointingClass() {\n      if (!this.pointing) {\n        return '';\n      }\n\n      var className = '';\n      if (['left', 'right'].includes(this.pointing)) className += this.pointing + ' ';\n      className += 'pointing';\n      if (['above', 'below'].includes(this.pointing)) className += ' ' + this.pointing;\n      return className;\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var ElementType = this.getElementType();\n    return h(ElementType, (0, _babelHelperVueJsxMergeProps2.default)([this.getChildPropsAndListeners(), {\n      'class': this.classes('ui', this.pointingClass, this.color, this.size, this.circular && 'circular', this.empty && 'empty', this.floating && 'floating', this.basic && 'basic', this.image && 'image', this.attached && this.attached + ' attached', this.ribbon && this.ribbon + ' ribbon', this.corner && this.corner + ' corner', this.tag && this.tag + ' tag', 'label')\n    }]), [this.icon && h('sui-icon', {\n      attrs: {\n        name: this.icon\n      }\n    }, []), this.$slots.default]);\n  }\n};"},"sourceMaps":null,"error":null,"hash":"0ab7553a2522f7d06b1152ab965c3eec","cacheData":{"env":{}}}