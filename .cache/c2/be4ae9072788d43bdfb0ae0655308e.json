{"id":"node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/package.json","includedInParent":true,"mtime":1564431753732},{"name":"babel-helper-vue-jsx-merge-props","loc":{"line":7,"column":43},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js","resolved":"/home/anderson/reservation-app/node_modules/babel-helper-vue-jsx-merge-props/index.js"},{"name":"../../lib","loc":{"line":11,"column":19},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/index.js"},{"name":"../../lib/PropTypes","loc":{"line":13,"column":25},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/PropTypes.js"},{"name":"../Icon/Icon","loc":{"line":15,"column":20},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Icon/Icon.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');\n\nvar _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);\n\nvar _lib = require('../../lib');\n\nvar _PropTypes = require('../../lib/PropTypes');\n\nvar _Icon = require('../Icon/Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = {\n  name: 'SuiButton',\n  mixins: [_lib.SemanticUIVueMixin],\n  props: {\n    active: {\n      type: Boolean,\n      description: 'A button can show it is currently the active user selection.'\n    },\n    animated: (0, _PropTypes.Enum)(['fade', 'vertical'], {\n      type: Boolean,\n      description: 'A button can animate to show hidden content.'\n    }),\n    attached: (0, _PropTypes.Enum)(['left', 'right', 'top', 'bottom'], {\n      description: 'A button can be attached to the top or bottom of other content.'\n    }),\n    basic: {\n      type: Boolean,\n      description: 'A basic button is less pronounced.'\n    },\n    circular: {\n      type: Boolean,\n      description: 'A button can be circular.'\n    },\n    className: {\n      type: String,\n      description: 'Additional classes.'\n    },\n    color: _PropTypes.Enum.Color(),\n    compact: {\n      type: Boolean,\n      description: 'A button can reduce its padding to fit into tighter spaces.'\n    },\n    content: {\n      type: String,\n      description: 'Shorthand for primary content.'\n    },\n    disabled: {\n      type: Boolean,\n      description: 'A button can show it is currently unable to be interacted with.'\n    },\n    floated: (0, _PropTypes.Enum)(['left', 'right'], {\n      description: 'A button can be aligned to the left or right of its container.'\n    }),\n    fluid: {\n      type: Boolean,\n      description: 'A button can take the width of its container.'\n    },\n    icon: String,\n    inverted: {\n      type: Boolean,\n      description: 'A button can be formatted to appear on dark backgrounds.'\n    },\n    // label: {\n    //   type: String,\n    //   description: 'Add a Label by text, props object, or pass a <Label />.',\n    // },\n    labelPosition: (0, _PropTypes.Enum)(['left', 'right'], {\n      description: 'A labeled button can format a Label or Icon to appear on the left or right.'\n    }),\n    loading: {\n      type: Boolean,\n      description: 'A button can show a loading indicator.'\n    },\n    negative: {\n      type: Boolean,\n      description: 'A button can hint towards a negative consequence.'\n    },\n    positive: {\n      type: Boolean,\n      description: 'A button can hint towards a positive consequence.'\n    },\n    primary: {\n      type: Boolean,\n      description: 'A button can be formatted to show different levels of emphasis.'\n    },\n    secondary: {\n      type: Boolean,\n      description: 'A button can be formatted to show different levels of emphasis.'\n    },\n    size: _PropTypes.Enum.Size(),\n    tabIndex: {\n      type: [Number, String],\n      description: 'A button can receive focus.'\n    },\n    toggle: {\n      // TODO: Add props and functional for toggle buttons\n      type: Boolean,\n      description: 'A button can be formatted to toggle on and off.'\n    },\n    social: _PropTypes.Enum.Social()\n  },\n  events: {\n    click: {\n      description: 'Click event passed to the button'\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var ElementType = this.getElementType('button');\n    var label = this.$slots.label;\n    var classList = this.classes('ui', this.active && 'active', this.attached && this.attached + ' attached', this.animated, this.animated && 'animated', this.basic && 'basic', this.circular && 'circular', this.className, this.color, this.compact && 'compact', this.disabled && 'disabled', this.floated && this.floated + ' floated', this.fluid && 'fluid', this.icon && !(this.content || this.$slots.default) && 'icon', !label && this.icon && this.labelPosition && 'icon', this.inverted && 'inverted', !label && this.labelPosition && this.labelPosition, !label && this.labelPosition && 'labeled', this.loading && 'loading', this.negative && 'negative', this.positive && 'positive', this.primary && 'primary', this.secondary && 'secondary', this.social, this.size, 'button');\n    var button = h(ElementType, (0, _babelHelperVueJsxMergeProps2.default)([this.getChildPropsAndListeners(), {\n      'class': classList,\n      attrs: {\n        role: 'button'\n      }\n    }]), [this.icon && h(_Icon2.default, {\n      attrs: {\n        name: this.icon\n      }\n    }, []), this.content || this.$slots.default]);\n\n    if (label) {\n      return h('div', {\n        'class': this.classes('ui', this.labelPosition, 'labeled', 'button')\n      }, [this.labelPosition === 'left' && label, button, this.labelPosition !== 'left' && label]);\n    }\n\n    return button;\n  }\n};"},"sourceMaps":null,"error":null,"hash":"a19e35321dbd2038613ff3ac09314c1b","cacheData":{"env":{}}}