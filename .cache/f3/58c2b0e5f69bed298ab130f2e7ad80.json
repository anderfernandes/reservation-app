{"id":"node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/package.json","includedInParent":true,"mtime":1564431753732},{"name":"babel-runtime/helpers/typeof","loc":{"line":7,"column":23},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/babel-runtime/helpers/typeof.js"},{"name":"babel-helper-vue-jsx-merge-props","loc":{"line":11,"column":43},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/babel-helper-vue-jsx-merge-props/index.js"},{"name":"lodash/escapeRegExp","loc":{"line":15,"column":28},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/escapeRegExp.js"},{"name":"../../lib","loc":{"line":19,"column":19},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/index.js"},{"name":"../../lib/PropTypes","loc":{"line":21,"column":25},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/PropTypes.js"},{"name":"../../elements/Icon/Icon","loc":{"line":23,"column":20},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Icon/Icon.js"},{"name":"../../elements/Input/Input","loc":{"line":27,"column":21},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js"},{"name":"../../elements/Divider/Divider","loc":{"line":31,"column":23},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Divider/Divider.js"},{"name":"../../elements/Label/Label","loc":{"line":35,"column":21},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Label/Label.js"},{"name":"./DropdownItem","loc":{"line":39,"column":28},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/DropdownItem.js"},{"name":"./DropdownMenu","loc":{"line":43,"column":28},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/DropdownMenu.js"},{"name":"../../elements/Flag/Flag","loc":{"line":47,"column":20},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Flag/Flag.js"},{"name":"../../elements/Image/Image","loc":{"line":51,"column":21},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/modules/Dropdown/Dropdown.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Image/Image.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');\n\nvar _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);\n\nvar _escapeRegExp = require('lodash/escapeRegExp');\n\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\n\nvar _lib = require('../../lib');\n\nvar _PropTypes = require('../../lib/PropTypes');\n\nvar _Icon = require('../../elements/Icon/Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nvar _Input = require('../../elements/Input/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _Divider = require('../../elements/Divider/Divider');\n\nvar _Divider2 = _interopRequireDefault(_Divider);\n\nvar _Label = require('../../elements/Label/Label');\n\nvar _Label2 = _interopRequireDefault(_Label);\n\nvar _DropdownItem = require('./DropdownItem');\n\nvar _DropdownItem2 = _interopRequireDefault(_DropdownItem);\n\nvar _DropdownMenu = require('./DropdownMenu');\n\nvar _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);\n\nvar _Flag = require('../../elements/Flag/Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _Image = require('../../elements/Image/Image');\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar directions = {\n  auto: 'auto',\n  autoUpward: 'auto-upward',\n  upward: 'upward',\n  downward: 'downward'\n};\nvar animations = {\n  name: 'slide',\n  down: 'down',\n  up: 'up'\n};\n\nfunction getOffset(el) {\n  var rect = el.getBoundingClientRect();\n  var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  var scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft\n  };\n}\n\nexports.default = {\n  name: 'SuiDropdown',\n  mixins: [_lib.SemanticUIVueMixin],\n  props: {\n    allowAdditions: {\n      type: Boolean,\n      description: 'A dropdown can allow user additions.'\n    },\n    button: {\n      type: Boolean,\n      description: 'A dropdown button style.'\n    },\n    icon: {\n      type: String,\n      description: 'Change default button to other button.'\n    },\n    item: {\n      type: Boolean,\n      description: 'A dropdown can be formatted as a Menu item.'\n    },\n    floating: {\n      type: Boolean,\n      description: 'A dropdown menu can appear to be floating below an element.'\n    },\n    fluid: {\n      type: Boolean,\n      description: 'A dropdown can take the full width of its parent.'\n    },\n    labeled: {\n      type: Boolean,\n      description: 'A dropdown can be labeled.'\n    },\n    multiple: {\n      type: Boolean,\n      description: 'A selection dropdown can allow multiple selections.'\n    },\n    loading: {\n      type: Boolean,\n      description: 'A dropdown can show that it is currently loading data.'\n    },\n    maxSelections: {\n      type: Number,\n      default: Infinity,\n      description: 'Maximum possible selections when using multiple selection'\n    },\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      },\n      description: \"Array of SuiDropdownItem props e.g. `{ text: '', value: '' }`\"\n    },\n    placeholder: {\n      type: String,\n      description: 'Placeholder text.'\n    },\n    pointing: {\n      type: String,\n      description: 'A dropdown can be formatted so that its menu is pointing.'\n    },\n    search: {\n      type: Boolean,\n      description: 'A dropdown can have a search field to filter options.'\n    },\n    searchInMenu: {\n      type: Object,\n      description: 'A dropdown can have a search input in dropdown menu. Should be passed an Object with SuiInput props.'\n    },\n    selection: {\n      type: Boolean,\n      description: 'A dropdown can be used to select between choices in a form.'\n    },\n    text: {\n      type: String,\n      description: 'Text of dropdown'\n    },\n    value: {\n      type: [Array, String, Number],\n      description: 'Value of the dropdown.'\n    },\n    direction: (0, _PropTypes.Enum)(Object.values(directions), {\n      default: directions.auto,\n      description: 'A dropdown can have a direction to open'\n    }),\n    openOnFocus: {\n      type: Boolean,\n      default: true,\n      description: 'Whether or not the menu should open when the dropdown is focused.'\n    },\n    closeOnBlur: {\n      type: Boolean,\n      default: true,\n      description: 'Whether or not the menu should close when the dropdown is blurred.'\n    },\n    noResultsMessage: {\n      type: String,\n      default: 'No results found',\n      description: 'Message to display when there are no results.'\n    },\n    maxSelectionsMessage: {\n      type: String,\n      default: 'Max {selections} selections',\n      description: 'Message to display when the maximum amount of selections is reached.'\n    }\n  },\n  events: {\n    input: {\n      custom: true\n    }\n  },\n  data: function data() {\n    return {\n      filter: '',\n      menu: null,\n      open: false,\n      menuDirection: null,\n      focused: false,\n      isMouseDown: false,\n      selectedIndex: -1\n    };\n  },\n  computed: {\n    maximumValuesSelected: function maximumValuesSelected() {\n      return this.multipleValue.length >= this.maxSelections;\n    },\n    downward: function downward() {\n      if (this.direction !== directions.auto && this.direction !== directions.autoUpward) {\n        return this.direction === directions.downward;\n      }\n\n      this.calculateMenuDirection();\n\n      if (this.menuDirection === null) {\n        return true;\n      }\n\n      if (this.menuDirection.below && this.menuDirection.above || !this.menuDirection.below && !this.menuDirection.above) {\n        // Dropdown can or cannot fit in either direction favoring specified\n        return this.direction === directions.auto;\n      } else if (this.menuDirection.below) {\n        // Dropdown can fit in context downward\n        return true;\n      } // Dropdown cannot fit below, opening upward\n\n\n      return false;\n    },\n    animation: function animation() {\n      return animations.name + ' ' + (this.downward ? animations.down : animations.up);\n    },\n    filteredOptions: function filteredOptions() {\n      var _this = this;\n\n      if (!this.search && !this.multiple && !this.searchInMenu) {\n        return this.options;\n      }\n\n      var re = new RegExp((0, _escapeRegExp2.default)(this.filter), 'i');\n      return this.options.filter(function (option) {\n        if (_this.filter && !re.test(option.text)) {\n          return false;\n        }\n\n        if (_this.multiple && (_this.maximumValuesSelected || _this.multipleValue.indexOf(option.value) > -1)) {\n          return false;\n        }\n\n        return true;\n      });\n    },\n    message: function message() {\n      if (this.filteredOptions.length === 0) {\n        if (this.multiple) {\n          if (this.maximumValuesSelected) {\n            return this.maxSelectionsMessage.replace('{selections}', this.maxSelections);\n          }\n        }\n\n        if (this.filter && !this.allowAdditions) {\n          return this.noResultsMessage;\n        }\n      }\n\n      return '';\n    },\n    menuNode: function menuNode() {\n      var _this2 = this;\n\n      var h = this.$createElement;\n      return h(_DropdownMenu2.default, null, [[this.searchInMenu && [h(_Input2.default, (0, _babelHelperVueJsxMergeProps2.default)([{\n        props: this.searchInMenu,\n        ref: 'searchInMenu'\n      }, {\n        on: {\n          'input': this.updateFilter,\n          'keydown': this.handleSearchKeyDown\n        },\n        attrs: {\n          value: this.filter\n        }\n      }]), []), h(_Divider2.default, null, [])], this.message ? h('div', {\n        'class': 'message'\n      }, [this.message]) : this.filteredOptions.map(function (option, index) {\n        return h(_DropdownItem2.default, (0, _babelHelperVueJsxMergeProps2.default)([{\n          props: option\n        }, {\n          attrs: {\n            active: _this2.multiple ? _this2.multipleValue.indexOf(option.value) !== -1 : _this2.value === option.value,\n            selected: _this2.selectedIndex === index\n          },\n          on: {\n            'select': _this2.selectItem\n          }\n        }]), []);\n      })]]);\n    },\n    multipleValue: function multipleValue() {\n      return Array.isArray(this.value) ? this.value : [];\n    },\n    searchNode: function searchNode() {\n      var h = this.$createElement;\n      return this.search && h('input', {\n        attrs: {\n          type: 'text',\n          'aria-autocomplete': 'list',\n          autoComplete: 'off',\n          tabindex: '0'\n        },\n        'class': 'search',\n        on: {\n          'input': this.updateFilter,\n          'keydown': this.handleSearchKeyDown\n        },\n        ref: 'search',\n        domProps: {\n          'value': this.filter\n        }\n      }, []);\n    },\n    selectedNodes: function selectedNodes() {\n      var _this3 = this;\n\n      var h = this.$createElement;\n\n      if (!this.multiple) {\n        return null;\n      }\n\n      return this.multipleValue.map(function (value) {\n        var existingOption = _this3.findOption(value);\n\n        var option = _this3.allowAdditions && !existingOption ? {\n          text: value\n        } : existingOption;\n        return h(_Label2.default, {\n          nativeOn: {\n            'click': _this3.handleClickOnSelectedNode\n          }\n        }, [option.icon && h(_Icon2.default, {\n          attrs: {\n            name: option.icon\n          }\n        }, []), option.image && h(_Image2.default, {\n          props: option.image\n        }, []), option.flag && h(_Flag2.default, {\n          attrs: {\n            name: option.flag\n          }\n        }, []), option.text, h(_Icon2.default, {\n          attrs: {\n            name: 'delete'\n          },\n          nativeOn: {\n            'click': function click() {\n              return _this3.deselectItem(value);\n            }\n          }\n        }, [])]);\n      });\n    },\n    textNode: function textNode() {\n      var h = this.$createElement;\n      var defaultText = this.text || this.placeholder;\n      var shouldHideText = this.multiple && this.value && this.value.length || !this.multiple && [null, undefined].indexOf(this.value) === -1;\n      var shouldShowSelectedItem = !this.multiple && this.open && typeof this.filteredOptions[this.selectedIndex] !== 'undefined' && this.filteredOptions[this.selectedIndex].value === this.value;\n      var text = shouldHideText ? this.findOption(this.value) : defaultText;\n\n      if (!text) {\n        return null;\n      }\n\n      var className = this.classes(this.placeholder && !shouldHideText && 'default', !this.searchInMenu && this.filter && !shouldShowSelectedItem && 'filtered', 'text');\n      var value = (typeof text === 'undefined' ? 'undefined' : (0, _typeof3.default)(text)) === 'object' ? text : {\n        text: text\n      };\n      return h('div', {\n        ref: 'text',\n        'class': className,\n        attrs: {\n          role: 'alert',\n          'aria-live': 'polite'\n        }\n      }, [value.icon && h(_Icon2.default, {\n        attrs: {\n          name: value.icon\n        }\n      }, []), value.image && h(_Image2.default, {\n        props: value.image\n      }, []), value.flag && h(_Flag2.default, {\n        attrs: {\n          name: value.flag\n        }\n      }, []), value.label && h(_Label2.default, {\n        props: value.label\n      }, []), value.text]);\n    }\n  },\n  watch: {\n    filteredOptions: function filteredOptions() {\n      this.updateSelectedIndex();\n    },\n    filter: function filter() {\n      if (this.search) {\n        this.resizeInput();\n      }\n    }\n  },\n  mounted: function mounted() {\n    document.body.addEventListener('click', this.closeMenu);\n  },\n  destroyed: function destroyed() {\n    document.body.removeEventListener('click', this.closeMenu);\n  },\n  methods: {\n    setOpen: function setOpen() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.open = value;\n\n      if (this.search && this.filteredOptions.length >= 0) {\n        this.selectedIndex = 0;\n      }\n\n      if (this.menu) {\n        this.menu.setOpen(value);\n      }\n    },\n    closeMenu: function closeMenu() {\n      if (!this.closeOnBlur) return;\n      this.setOpen(false);\n    },\n    deselectItem: function deselectItem(selectedValue) {\n      this.$emit('input', this.multipleValue.filter(function (value) {\n        return value !== selectedValue;\n      }));\n    },\n    findOption: function findOption(value) {\n      return this.options.find(function (option) {\n        return option.value === value;\n      });\n    },\n    handleMouseDown: function handleMouseDown() {\n      var _this4 = this;\n\n      this.isMouseDown = true;\n      document.body.addEventListener('mouseup', function () {\n        _this4.isMouseDown = false;\n      }, {\n        capture: true,\n        once: true\n      });\n    },\n    handleClick: function handleClick(e) {\n      var _this5 = this;\n\n      e.stopPropagation();\n\n      if (this.open) {\n        if (this.search && e.target === this.$refs.search) return;\n        var path = e.path || e.composedPath && e.composedPath();\n\n        if (!path) {\n          this.addEventPath();\n        }\n\n        if (this.searchInMenu && e.target === this.$refs.searchInMenu.$refs.input) return;\n\n        if (this.multiple && path.indexOf(this.menu.$el) !== -1) {\n          this.$nextTick(function () {\n            return _this5.focusSearch();\n          });\n          return;\n        }\n      }\n\n      this.focusSearch();\n      this.setOpen(!this.open);\n    },\n    addEventPath: function addEventPath() {\n      if (!('path' in Event.prototype)) {\n        Object.defineProperty(Event.prototype, 'path', {\n          get: function get() {\n            var path = [];\n            var currentElem = this.target;\n\n            while (currentElem) {\n              path.push(currentElem);\n              currentElem = currentElem.parentElement;\n            }\n\n            if (path.indexOf(window) === -1 && path.indexOf(document) === -1) {\n              path.push(document);\n            }\n\n            if (path.indexOf(window) === -1) {\n              path.push(window);\n            }\n\n            return path;\n          }\n        });\n      }\n    },\n    handleFocus: function handleFocus() {\n      if (this.focused) return;\n      this.focused = true;\n\n      if (!this.isMouseDown && this.openOnFocus) {\n        this.setOpen(true);\n      }\n    },\n    handleBlur: function handleBlur(e) {\n      if (this.isMouseDown || e.relatedTarget === this.$refs.search) {\n        return;\n      }\n\n      this.focused = false;\n\n      if (this.open && this.closeOnBlur) {\n        this.setOpen(false);\n      }\n    },\n    handleClickOnSelectedNode: function handleClickOnSelectedNode(e) {\n      e.stopPropagation();\n    },\n    toggleFilteredText: function toggleFilteredText(filteredText, filter) {\n      if (!this.searchInMenu && !this.multiple && !filteredText.classList.contains('filtered') && filter.trim() !== '') {\n        filteredText.classList.add('filtered');\n      }\n\n      if (!this.multiple && filter.trim() === '') filteredText.classList.remove('filtered');\n    },\n    handleKeyDown: function handleKeyDown(e) {\n      if (this.$refs.text) {\n        this.toggleFilteredText(this.$refs.text, this.filter);\n      }\n\n      var KEYS = {\n        ENTER: 13,\n        ESCAPE: 27,\n        UP_ARROW: 38,\n        DOWN_ARROW: 40\n      };\n\n      if (!this.open) {\n        if (e.keyCode !== KEYS.ENTER) {\n          this.setOpen(true);\n          e.preventDefault();\n        }\n\n        return;\n      }\n\n      var direction = 1;\n\n      switch (e.keyCode) {\n        case KEYS.ENTER:\n          {\n            var filter = this.filter;\n            if (!this.multiple && this.selectedIndex !== -1) this.filter = '';\n\n            if (this.allowAdditions && this.selectedIndex === -1 && filter.trim() !== '') {\n              e.preventDefault();\n              this.selectItem(filter);\n            } else if (this.selection || this.searchInMenu || this.search) {\n              if (this.selectedIndex === -1) return;\n              e.preventDefault();\n\n              if (!this.multiple) {\n                this.setOpen(false);\n                this.$refs.text.classList.remove('filtered');\n              } else {\n                this.selectItem(this.filteredOptions[this.selectedIndex].value);\n              }\n            }\n\n            return;\n          }\n\n        case KEYS.ESCAPE:\n          if (this.open) this.setOpen(false);\n          return;\n\n        case KEYS.UP_ARROW:\n          direction = -1;\n          break;\n\n        case KEYS.DOWN_ARROW:\n          break;\n\n        default:\n          return;\n      }\n\n      e.preventDefault();\n      if (this.filteredOptions.length === 0) return;\n      var newValue = this.selectedIndex + direction;\n\n      if (this.filteredOptions.length <= newValue) {\n        this.selectedIndex = 0;\n      } else if (newValue < 0) {\n        this.selectedIndex = this.filteredOptions.length - 1;\n      } else {\n        this.selectedIndex = newValue;\n      }\n\n      if ((this.selection || this.searchInMenu || this.search) && !this.multiple) {\n        this.$emit('input', this.filteredOptions[this.selectedIndex].value);\n      }\n    },\n    register: function register(menu) {\n      this.menu = menu;\n    },\n    selectItem: function selectItem(selectedValue) {\n      if (this.multiple && this.maximumValuesSelected) return;\n      var newValue = this.multiple ? this.multipleValue.filter(function (value) {\n        return value !== selectedValue;\n      }).concat(selectedValue) : selectedValue;\n      this.$emit('input', newValue);\n      this.filter = '';\n\n      if (!this.multiple) {\n        this.$nextTick(this.updateSelectedIndex);\n      }\n    },\n    updateSelectedIndex: function updateSelectedIndex() {\n      var _this6 = this;\n\n      if (this.multiple) {\n        this.selectedIndex = this.filteredOptions.length > this.selectedIndex ? this.selectedIndex : this.selectedIndex - 1;\n      } else {\n        this.selectedIndex = this.filteredOptions.findIndex(function (item) {\n          return item.value === _this6.value;\n        });\n      }\n    },\n    resizeInput: function resizeInput() {\n      var sizer = this.$refs.sizer;\n      sizer.innerText = this.filter;\n      var width = sizer.offsetWidth;\n      sizer.style.display = '';\n      sizer.style.padding = '';\n      this.$refs.search.style.minWidth = Math.ceil(width + 1) + 'px';\n    },\n    updateFilter: function updateFilter(event) {\n      this.filter = typeof event === 'string' ? event : event.target.value;\n    },\n    focusSearch: function focusSearch() {\n      if (this.search) this.$refs.search.focus();\n    },\n    handleSearchKeyDown: function handleSearchKeyDown(e) {\n      if (!this.multiple || e.keyCode !== 8 || this.filter !== '') return;\n      this.multipleValue.pop();\n      this.$emit('input', this.multipleValue);\n    },\n    calculateMenuDirection: function calculateMenuDirection() {\n      if (typeof window === 'undefined' || !this.menu || !this.menu.$el || !this.open) return;\n      this.menu.$el.classList.add('loading');\n      this.$el.classList.remove('upward');\n      var c = {\n        context: {\n          offset: {\n            top: 0,\n            left: 0\n          },\n          scrollTop: document.body.scrollTop,\n          height: document.body.offsetHeight\n        },\n        menu: {\n          offset: getOffset(this.menu.$el),\n          height: this.menu.$el.offsetHeight\n        }\n      };\n      this.menu.$el.classList.remove('loading');\n      this.menuDirection = {\n        above: c.menu.offset.top - c.menu.height - this.$el.clientHeight >= 0,\n        below: c.menu.offset.top + c.menu.height < c.context.height\n      };\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var ElementType = this.getElementType(this.button ? 'button' : 'div');\n    var eventHandlers = {\n      '!mousedown': this.handleMouseDown,\n      click: this.handleClick,\n      '!focus': this.handleFocus,\n      '!blur': this.handleBlur,\n      '!keydown': this.handleKeyDown\n    };\n    return h(ElementType, (0, _babelHelperVueJsxMergeProps2.default)([{\n      attrs: {\n        role: 'listbox',\n        'aria-expanded': this.open,\n        tabindex: '0'\n      }\n    }, this.getChildPropsAndListeners(), {\n      'class': this.classes('ui', this.button && 'button', this.item && 'item', this.floating && 'floating', this.fluid && 'fluid', this.pointing && 'pointing ' + this.pointing, this.loading && 'loading', this.labeled && 'labeled', this.multiple && 'multiple', this.selection && 'selection', this.search && 'search', this.open && 'active visible', !this.downward && directions.upward, 'dropdown')\n    }, {\n      on: eventHandlers,\n      nativeOn: eventHandlers\n    }]), [this.selectedNodes, this.searchNode, this.textNode, this.icon !== null && h('i', {\n      ref: 'icon',\n      attrs: {\n        'aria-hidden': 'true'\n      },\n      'class': (this.icon || 'dropdown') + ' icon'\n    }, []), h('span', {\n      'class': 'sizer',\n      ref: 'sizer'\n    }, []), this.$slots.default || this.menuNode]);\n  }\n};"},"sourceMaps":null,"error":null,"hash":"e89d35a28357ccb95b9f710b3d9b6abe","cacheData":{"env":{}}}