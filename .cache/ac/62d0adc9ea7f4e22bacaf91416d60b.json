{"id":"node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/package.json","includedInParent":true,"mtime":1564431753732},{"name":"babel-helper-vue-jsx-merge-props","loc":{"line":7,"column":43},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","resolved":"/home/anderson/reservation-app/node_modules/babel-helper-vue-jsx-merge-props/index.js"},{"name":"../../lib","loc":{"line":11,"column":19},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/index.js"},{"name":"../../lib/PropTypes","loc":{"line":13,"column":25},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/lib/PropTypes.js"},{"name":"../../elements/Button/Button","loc":{"line":15,"column":22},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Button/Button.js"},{"name":"../../elements/Icon/Icon","loc":{"line":19,"column":20},"parent":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Input/Input.js","resolved":"/home/anderson/reservation-app/node_modules/semantic-ui-vue/dist/commonjs/elements/Icon/Icon.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _babelHelperVueJsxMergeProps = require('babel-helper-vue-jsx-merge-props');\n\nvar _babelHelperVueJsxMergeProps2 = _interopRequireDefault(_babelHelperVueJsxMergeProps);\n\nvar _lib = require('../../lib');\n\nvar _PropTypes = require('../../lib/PropTypes');\n\nvar _Button = require('../../elements/Button/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _Icon = require('../../elements/Icon/Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = {\n  name: 'SuiInput',\n  components: {\n    SuiButton: _Button2.default,\n    SuiIcon: _Icon2.default\n  },\n  mixins: [_lib.SemanticUIVueMixin],\n  props: {\n    action: String,\n    disabled: Boolean,\n    error: Boolean,\n    focus: Boolean,\n    icon: String,\n    iconPosition: (0, _PropTypes.Enum)(['left', 'right']),\n    inverted: Boolean,\n    loading: Boolean,\n    transparent: Boolean,\n    type: {\n      description: 'The HTML input type.',\n      default: 'text',\n      type: String\n    },\n    value: [String, Number]\n  },\n  events: {\n    input: {\n      custom: true\n    },\n    blur: {\n      custom: true\n    }\n  },\n  methods: {\n    handleChange: function handleChange(event) {\n      var eventValue = event.target.value;\n      var value = this.type === 'number' ? Number(eventValue) : eventValue;\n      this.$emit('input', value);\n    }\n  },\n  render: function render() {\n    var _this = this;\n\n    var h = arguments[0];\n    var ElementType = this.getElementType();\n    var icon = void 0;\n\n    if (this.loading || this.icon) {\n      icon = h(_Icon2.default, {\n        attrs: {\n          name: this.loading ? 'loading' : this.icon\n        }\n      }, []);\n    }\n\n    return h(ElementType, (0, _babelHelperVueJsxMergeProps2.default)([this.getChildPropsAndListeners(), {\n      'class': this.classes('ui', this.action && 'action', this.disabled && 'disabled', this.error && 'error', this.focus && 'focus', this.transparent && 'transparent', this.inverted && 'inverted', this.loading && 'loading', this.iconPosition === 'left' && 'left', (this.loading || this.icon) && 'icon', 'input')\n    }]), [h('input', (0, _babelHelperVueJsxMergeProps2.default)([{\n      domProps: {\n        'value': this.value\n      },\n      on: {\n        'input': this.handleChange,\n        'blur': function blur(e) {\n          return _this.$emit('blur', e);\n        }\n      },\n      ref: 'input',\n      attrs: {\n        type: this.type\n      }\n    }, {\n      attrs: this.$attrs\n    }]), []), icon, this.action && h(_Button2.default, {\n      attrs: {\n        content: this.action\n      }\n    }, [])]);\n  }\n};"},"sourceMaps":null,"error":null,"hash":"1c6dcd09feff3482f4d33cf58a836ebb","cacheData":{"env":{}}}