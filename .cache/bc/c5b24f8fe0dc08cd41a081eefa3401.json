{"id":"node_modules/lodash/_baseIsEqualDeep.js","dependencies":[{"name":"/home/anderson/reservation-app/package.json","includedInParent":true,"mtime":1565037056203},{"name":"/home/anderson/reservation-app/node_modules/lodash/package.json","includedInParent":true,"mtime":1564431754536},{"name":"./_Stack","loc":{"line":1,"column":20},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_Stack.js"},{"name":"./_equalArrays","loc":{"line":2,"column":26},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_equalArrays.js"},{"name":"./_equalByTag","loc":{"line":3,"column":25},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_equalByTag.js"},{"name":"./_equalObjects","loc":{"line":4,"column":27},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_equalObjects.js"},{"name":"./_getTag","loc":{"line":5,"column":21},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/_getTag.js"},{"name":"./isArray","loc":{"line":6,"column":22},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/isArray.js"},{"name":"./isBuffer","loc":{"line":7,"column":23},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/isBuffer.js"},{"name":"./isTypedArray","loc":{"line":8,"column":27},"parent":"/home/anderson/reservation-app/node_modules/lodash/_baseIsEqualDeep.js","resolved":"/home/anderson/reservation-app/node_modules/lodash/isTypedArray.js"}],"generated":{"js":"var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"},"sourceMaps":null,"error":null,"hash":"9406561f8f4f8f7a4e7ed7d4c3b978fc","cacheData":{"env":{}}}